#include <Wire.h>
#include <RTClib.h>

// Initialize RTC
RTC_DS3231 rtc;

struct Lesson {
  String startTime;
  String endTime;
  String subject;
};

struct DaySchedule {
  Lesson lessons[8];  // Maximum of 8 lessons per day
};

// Timetable for each weekday (Monday to Friday)
DaySchedule timetable[] = {
  // Monday
  { { {"13:15", "14:00", "Angol"}, {"14:05", "14:45", "Angol"}, {"15:35", "16:15", "Adatbázis"}, {"", "", ""}, {"", "", ""}, {"", "", ""}, {"", "", ""}, {"", "", ""} } },
  // Tuesday
  { { {"10:25", "11:15", "Osztályfőnöki"}, {"11:20", "12:05", "Fizika"}, {"13:00", "13:45", "Fizika"}, {"", "", ""}, {"", "", ""}, {"", "", ""}, {"", "", ""}, {"", "", ""} } },
  // Wednesday
  { { {"13:15", "14:00", "Angol"}, {"14:05", "14:45", "Digitális kultúra"}, {"15:35", "16:15", "Asztali"}, {"", "", ""}, {"", "", ""}, {"", "", ""}, {"", "", ""}, {"", "", ""} } },
  // Thursday
  { { {"14:05", "14:45", "Angol"}, {"15:00", "15:45", "Digitális kultúra"}, {"16:00", "16:45", "Backend"}, {"", "", ""}, {"", "", ""}, {"", "", ""}, {"", "", ""}, {"", "", ""} } },
  // Friday
  { { {"12:20", "13:05", "Digitális kultúra"}, {"13:15", "14:00", "Adatbázis"}, {"", "", ""}, {"", "", ""}, {"", "", ""}, {"", "", ""}, {"", "", ""}, {"", "", ""} } }
};

int currentDay;
int currentTimeInMins;

int timeToMinutes(String time) {
  int colonIndex = time.indexOf(':');
  int hour = time.substring(0, colonIndex).toInt();
  int minute = time.substring(colonIndex + 1).toInt();
  return hour * 60 + minute;
}

void setup() {
  Serial.begin(9600);

  // Set up RTC
  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC!");
    while (1);
  }

  // Check if the RTC lost power
  if (rtc.lostPower()) {
    Serial.println("RTC lost power!");
    // Optionally, you can set the time here if needed
    // rtc.adjust(DateTime(2024, 11, 4, 13, 0, 0));
  }

  // Get current datetime
  DateTime now = rtc.now();

  // Get current day
  currentDay = now.dayOfTheWeek();

  // Get current time in minutes
  currentTimeInMins = now.hour() * 60 + now.minute();

  Serial.println("Current day: " + String(currentDay));
  Serial.println("Current time in minutes: " + String(currentTimeInMins));

  if (currentDay == 0 || currentDay == 6) {
    // Saturday or Sunday
    Serial.println("Nincs ma suli");
  } else {
    // Display the current or next lesson
    displayCurrentOrNextLesson();
  }
}

void displayCurrentOrNextLesson() {
  DaySchedule todaySchedule = timetable[currentDay - 1];

  Serial.println("Checking lessons:");

  for (int i = 0; i < 8; i++) {
    Lesson lesson = todaySchedule.lessons[i];
    
    // If the lesson is empty, skip to the next iteration
    if (lesson.startTime == "" && lesson.endTime == "" && lesson.subject == "") {
      continue;
    }

    int lessonStart = timeToMinutes(lesson.startTime);
    int lessonEnd = timeToMinutes(lesson.endTime);

    Serial.println("Lesson " + String(i + 1) + ": " + lesson.subject + " Start: " + lesson.startTime + " End: " + lesson.endTime);

    if (currentTimeInMins < lessonStart) {
      // If it's before the start time of the first lesson
      Serial.println("Upcoming lesson:");
      Serial.println("Subject: " + lesson.subject);
      Serial.println("Starts at: " + lesson.startTime);
      Serial.println("Ends at: " + lesson.endTime);
      return;
    } else if (currentTimeInMins >= lessonStart && currentTimeInMins < lessonEnd) {
      // Display the current lesson
      Serial.println("Current lesson:");
      Serial.println("Subject: " + lesson.subject);
      Serial.println("Ends at: " + lesson.endTime);
      return;
    }
  }

  Serial.println("No more lessons for today");
}

void loop() {
}
